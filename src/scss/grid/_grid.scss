// ==========================================================================
// Grid
// ==========================================================================

$include-html-grid-classes: true;
$row-width: 1200px;
$total-columns: 12;
$column-gutter: 20px;

//
// Helpers
// ==========================================================================
@function grid-calc($colNumber, $totalColumns) {
  @return percentage(($colNumber / $totalColumns));
}

// We use this to do clear floats
@mixin clearfix {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

//
// Row
// ==========================================================================
@mixin grid-row($behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    width: auto;
    margin-left: ($column-gutter/2);
    margin-right: ($column-gutter/2);
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
  }

  // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    width: 100%;
    margin: 0;
    max-width: $row-width;
  } 

  // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    width: auto;
    margin: 0;
    max-width: none;
  }

  // use @include grid-row; to use a container row
  @else {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    margin-top: 0;
    margin-bottom: 0;
    max-width: $row-width;

  }

  // Clearfix for all rows
  @include clearfix();
}

//
// Column
// ==========================================================================
@mixin grid-column($columns:false, $collapse:false) {

  // If collapsed, get rid of gutter padding
  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  }

  // Gutter padding whenever a column isn't set to collapse
  // (use $collapse:null to do nothing)
  @else if $collapse == false {
    padding-left: ($column-gutter / 2);
    padding-right: ($column-gutter / 2);
  }

  // If a column number is given, calculate width
  @if $columns {
    width: grid-calc($columns, $total-columns);
  }

}

//
// Generate Grid HTML Classes
// ==========================================================================
@mixin grid-html-classes($size) {

  .column,
  .columns { 
    @include grid-column($columns:false); 
    float: left;
  }

  @for $i from 1 through $total-columns {
    .#{$size}-#{$i} { @include grid-column($columns:$i,$collapse:null); }
  }

	.row {
		&.#{$size}-collapse {
			> .column,
			> .columns { @include grid-column($collapse:true); }

			.row {margin-left:0; margin-right:0;}
		}
		&.#{$size}-uncollapse {
			> .column,
			> .columns {
				@include grid-column;
			}
		}
	}
}

@if $include-html-grid-classes {
  // Row
  .row {
    @include grid-row;

    &.collapse {
       > .column,
       > .columns { @include grid-column($collapse:true); }

      .row {margin-left:0; margin-right:0;}
    }

    .row { @include grid-row($behavior:nest);
      &.collapse { @include grid-row($behavior:nest-collapse); }
    }
  }

  // Column
  .column,
  .columns { 
    @include grid-column($columns:$total-columns); 
  }

  // Generate Column Classes
  @media #{$small-up} {
    @include grid-html-classes("small");
  }

  @media #{$medium-up} {
    @include grid-html-classes("medium");
  }

  @media #{$large-up} {
    @include grid-html-classes("large");
  }

  @media #{$extra-large-up} {
    @include grid-html-classes("extra-large");
  }
}

